// test-login.ts
import sequelize from "./config/database";
import { validateData } from "./utils/validateData";
import { loginSchema, LoginData } from "./validators/profileValidator";
import { AuthService } from "./services/authService";

async function testLogin() {
  try {
    await sequelize.authenticate();
    console.log("üü¢ Conectado ao banco de dados!");

    // 1. Dados v√°lidos de login (use os mesmos do perfil criado antes!)
    const loginInput = {
      identifier: "teste1751047892403@email.com", // ‚úÖ email ou username que j√° existe no banco
      password: "123456", // ‚úÖ senha correta do perfil
    };

    // 2. Valida√ß√£o com Zod
    const validation = validateData(loginSchema, loginInput);
    if (!validation.success) {
      console.error("‚ùå Erros de valida√ß√£o:", validation.issues);
      return;
    }

    const loginData: LoginData = validation.data;

    // 3. Teste de login real
    const result = await AuthService.login(loginData);
    console.log("‚úÖ Login bem-sucedido!");
    console.log("üìÑ Resultado:", result);
  } catch (error) {
    const msg = error instanceof Error ? error.message : "Erro desconhecido";
    console.error("‚ùå Falha no login:", msg);
  } finally {
    await sequelize.close();
    console.log("üîí Conex√£o com o banco encerrada.");
  }
}

testLogin();
